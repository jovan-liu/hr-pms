<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/account/login.jsp" />
		<property name="unauthorizedUrl" value="/commons/error.jsp" />
		<!-- override these for application-specific URLs if you like: <property 
			name="successUrl" value="/home.jsp"/> <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean -->
		<!-- defined will be automatically acquired and available via its beanName 
			in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases 
			here if you like: -->

		<property name="filterChainDefinitions">
			<value>
				/index.jsp=anon
				/test/hello=anon
				/account/login=anon
				/account/check=anon
				/introductioninformation/get=anon
				/account/login.jsp=anon
				/account/logout.action=anon
				/resources/**=anon
				/static/**=anon
				/**=authc
			</value>
		</property>
	</bean>

	<!-- 通过mysql认证 -->
	<bean id="sqlRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<!-- 数据库中status的状态都是1，改成0是为了不让用户通过数据库密码登录，只能用ldap -->
		<property name="authenticationQuery"
			value="SELECT password FROM users WHERE username =? and status=1" />
		<property name="userRolesQuery"
			value="SELECT r.roleName FROM roles AS r, user_roles AS ur WHERE r.id = ur.role_id AND ur.user_id = (SELECT id FROM users WHERE username = ? and status=1)" />
		<property name="permissionsQuery"
			value="SELECT p.permission FROM permissions AS p, roles_permissions AS rp WHERE p.id = rp.permission_id AND rp.role_id = (SELECT id FROM roles WHERE roleName = ?)" />
		<property name="permissionsLookupEnabled" value="true" />
		<property name="dataSource" ref="dataSource" />
		<!--<property name="saltStyle" value="COLUMN"/> -->
		<!-- <property name="credentialsMatcher" ref="sha512Matcher"/> -->
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<!-- <property name="realms"> <list> <ref bean="opsldapRealm"/> <ref bean="devldapRealm"/> 
			<ref bean="sqlRealm"/> </list> </property> -->
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions (see the JavaDoc for more): -->
		<property name="sessionMode" value="native" />
	</bean>


	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean id="annotationProxy"
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">
					/error
				</prop>
				<prop key="org.apache.shiro.authz.UnauthenticatedException">
					/error
				</prop>
			</props>
		</property>
	</bean>
	<!-- Secure Spring remoting: Ensure any Spring Remoting method invocations 
		can be associated with a Subject for security checks. -->
	<bean id="secureRemoteInvocationExecutor"
		class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>